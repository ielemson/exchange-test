{"version":3,"sources":["util/index.js","App.js","reportWebVitals.js","index.js"],"names":["fetchCurrencyUsdBasedRates","a","axios","get","data","rates","App","initialState","useState","state","setState","newState","prevState","Object","assign","useMergedState","usd_based_rates","option1","option2","options","value","label","wallets","error","error2","on","setRates","useEffect","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAWO,IAAMA,EAA0B,uCAAG,8BAAAC,EAAA,4DAC1B,uCAD0B,SAEfC,IAAMC,IAAN,UADX,uCACW,cAFe,uBAE9BC,EAF8B,EAE9BA,KAF8B,kBAGhCA,EAAKC,OAH2B,2CAAH,qD,OCmCxBC,MAzCf,WACE,MDHK,SAAwBC,GAC3B,MAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAGA,MAAO,CAACD,EAFe,SAAAE,GAAQ,OAC7BD,GAAS,SAAAE,GAAS,OAAIC,OAAOC,OAAO,GAAIF,EAAWD,QCA/BI,CAAe,CACrCC,gBAAiB,GACjBC,QAAS,MACTC,QAAS,MACTC,QAAU,CACR,CAAEC,MAAQ,MAAQC,MAAQ,OAC1B,CAAED,MAAQ,MAAOC,MAAQ,OACzB,CAAED,MAAQ,MAAOC,MAAQ,QAE3BC,QAAU,CAAE,IAAO,IAAK,IAAO,GAAI,IAAO,KAC1CC,MAAO,GACPC,OAAQ,GACRC,IAAI,IAZN,mBAAYf,GAAZ,WAiBMgB,EAAQ,uCAAG,4BAAAzB,EAAA,sEACKD,IADL,OACTK,EADS,OAEfK,EAAS,CAACM,gBAAiBX,IAFZ,2CAAH,qDAad,OARAsB,qBAAU,WACRD,MAEA,IAMA,qBAAKE,UAAU,YAAf,SACE,qBAAKA,UAAU,eAAf,SACC,6DC3BQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3d90564b.chunk.js","sourcesContent":["import {useState} from 'react';\nimport axios from 'axios';\n\nexport function useMergedState(initialState) {\n    const [state, setState] = useState(initialState);\n    const setMergedState = newState =>\n      setState(prevState => Object.assign({}, prevState, newState));\n    return [state, setMergedState];\n  }\n\n\nexport const fetchCurrencyUsdBasedRates = async () => {\n    const api = 'https://api.exchangerate.host/latest';\n    const { data } = await axios.get(`${api}?base=USD`);\n   return data.rates;\n  }","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { useMergedState, fetchCurrencyUsdBasedRates } from './util';\n\nfunction App() {\n  let [state, setState] = useMergedState({\n    usd_based_rates: {},\n    option1: 'USD',\n    option2: 'GBP',\n    options:  [\n      { value : 'USD' , label : 'USD' },\n      { value : 'GBP', label : 'GBP' },\n      { value : 'EUR', label : 'EUR' }\n    ],\n    wallets:  { \"USD\": 200, 'GBP': 10, 'EUR': 150 },\n    error: '',\n    error2: '',\n    on: true\n  });\n  \n  const symbol = { \"USD\" : '$', \"GBP\": '£', \"EUR\": '€' };\n \n  const setRates = async () => {\n    const rates = await fetchCurrencyUsdBasedRates();\n    setState({usd_based_rates: rates });\n  }\n\n  useEffect(() => {\n    setRates();\n  // eslint-disable-next-line no-use-before-define\n  },[]);\n\n\n\n \n  return (\n    <div className=\"container\">\n      <div className=\"row mT-20 bg\">\n       <h1>Welcome To Exchange -1</h1>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}