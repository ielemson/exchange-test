{"version":3,"sources":["util/index.js","App.js","reportWebVitals.js","index.js"],"names":["fetchCurrencyUsdBasedRates","a","axios","get","data","rates","App","initialState","useState","state","setState","newState","prevState","Object","assign","useMergedState","usd_based_rates","option1","option2","options","value","label","wallets","error","error2","on","symbol","setRates","useEffect","convertCurrency","text","operation","amount","parseInt","target","rate","temp_wallets","action","className","onChange","option","map","index","defaultValue","style","marginTop","type","onClick","Math","ceil","exchange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a141223a.chunk.js","sourcesContent":["import {useState} from 'react';\nimport axios from 'axios';\n\nexport function useMergedState(initialState) {\n    const [state, setState] = useState(initialState);\n    const setMergedState = newState =>\n      setState(prevState => Object.assign({}, prevState, newState));\n    return [state, setMergedState];\n  }\n\n\nexport const fetchCurrencyUsdBasedRates = async () => {\n    const api = 'https://api.exchangerate.host/latest';\n    const { data } = await axios.get(`${api}?base=USD`);\n   return data.rates;\n  }","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { useMergedState, fetchCurrencyUsdBasedRates } from './util';\n\nfunction App() {\n  let [state, setState] = useMergedState({\n    usd_based_rates: {},\n    option1: 'USD',\n    option2: 'GBP',\n    options:  [\n      { value : 'USD' , label : 'USD' },\n      { value : 'GBP', label : 'GBP' },\n      { value : 'EUR', label : 'EUR' }\n    ],\n    wallets:  { \"USD\": 200, 'GBP': 10, 'EUR': 150 },\n    error: '',\n    error2: '',\n    on: true\n  });\n  \n  const symbol = { \"USD\" : '$', \"GBP\": '£', \"EUR\": '€' };\n \n  const setRates = async () => {\n    const rates = await fetchCurrencyUsdBasedRates();\n    setState({usd_based_rates: rates });\n  }\n\n  useEffect(() => {\n    setRates();\n  // eslint-disable-next-line no-use-before-define\n  },[]);\n\nconst updateBasedCurrency = (option) => {\n  setState({option1: option.target.value});\n}\n\n\n/**\n * \n * @param {*} option \n * @param {*} balance \n * \n */\n  const convertCurrency = (text, operation) => {\n    const amount = parseInt(text.target.value);\n    if(amount <= 0) {\n      return;\n    }\n    let rate = 0;\n    if(operation === 'sub'){\n       rate = state.usd_based_rates[state.option2];\n\n      if(amount > state.wallets[state.option1]) {\n        setState({ error: 'Exceeds Balance'});\n        return;\n      } else {\n        setState({ error: ''});\n      }\n    } else {\n       rate = state.usd_based_rates[state.option1];\n      if(amount > state.wallets[state.option1]) {\n        setState({ error2: 'Exceeds Balance'});\n        return;\n      } else {\n        setState({ error2: ''});\n       \n      }\n    }\n     setState({temp_wallets: {action: operation, amount, rate } });\n    \n  }\n\n  const exchange = () => {\n    const { temp_wallets: {action: operation, amount, rate } } = state;\n    let option1 = 0;\n    let option2 = 0;\n\n    if(operation === 'sub'){\n      option1 =  state.wallets[state.option1] - amount;\n      if(state.option2 === 'USD'){\n        option2 =  Math.ceil(state.wallets[state.option2] + (amount * rate));\n      } else {\n        option2 =  Math.ceil(state.wallets[state.option2] + (amount / rate));\n      }\n    } else {\n      option2 =  state.wallets[state.option2] + amount;\n\n      if(state.option1 === 'USD'){\n        option1 = Math.ceil(state.wallets[state.option1] - (amount * rate));\n      } else {\n        option1 = Math.ceil(state.wallets[state.option1] - (amount / rate));\n      }\n    }\n    setState({wallets: {[state.option1]: option1, [state.option2]: option2 } });\n    \n  }\n\n \n  return (\n    <div className=\"container\">\n      <div className=\"row mT-20 bg\">\n        <div className=\"col-md-2 col-sm-4 col-xs-4 height pT-60\">\n            <select onChange={updateBasedCurrency}>\n              {state.options.map((option, index) => <option value={`${option.value}`} key={index} defaultValue={option.label === state.option1.label}>{`${option.label}`}</option>\n              )}\n            </select>\n            <br/>\n            <label style={{ marginTop: 10}}>Balance: {symbol[state.option1]}{state.wallets[state.option1]} </label>\n        </div>\n        <div className=\"col-md-3 height hidden-md hidden-sm hidden-xs\"></div>\n        <div className=\"col-md-4 col-sm-4 col-xs-4 height\">\n          <label type=\"text\" className=\"exchangeInput\">{symbol[state.option1]}{state.usd_based_rates[state.option1]} = {symbol[state.option2]}{state.usd_based_rates[state.option2]} </label>\n        </div>\n        <div className=\"col-md-2 hidden-md hidden-sm hidden-xs\"></div>\n        <div className=\"col-md-1 height pT-60 col-sm-2 col-xs-2\">\n          <label>-</label>\n          <input className=\"form__field\" onChange={(text) => convertCurrency(text, 'sub')} />\n          <br /> <br />\n          <span className=\"text text-danger small\">{state.error}</span>\n        </div>\n      </div>\n\n      <div className=\"row lowerContainer\">\n        <div className=\"col-md-2  col-sm-6 col-xs-6 height pT-60\">\n        <select onChange={(option) => setState({option2: option.target.value})}>\n              {state.options.map((option, index) => <option value={`${option.value}`} key={index} defaultValue={option.label === state.option2}>{`${option.label}`}</option>\n              )}\n            </select>\n            <br />\n          <label style={{ marginTop: 10}}>Balance: {symbol[state.option2]}{state.wallets[state.option2]} </label>\n        </div>\n        <div className=\"col-md-9  col-sm-2 col-xs-2\"></div>\n        <div className=\"col-md-1 height  col-sm-4 col-xs-4 pT-60\">\n          <label>+</label>\n          <input className=\"form__field\" onChange={(text) => convertCurrency(text, 'add')} />\n          <br />\n          <span className=\"text text-danger small\">{state.error2}</span>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-12 mT-20  col-sm-12 col-xs-12\">\n          <button onClick={() => exchange()} className=\"btn btn-md btn-danger\">{ state.on ? 'Exchange' : 'INExchange' }</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}